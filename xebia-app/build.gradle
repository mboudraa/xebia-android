buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.2'
        classpath 'org.robolectric.gradle:gradle-android-test-plugin:0.9.+'

    }
}
apply plugin: 'android'
apply plugin: 'android-apt'
apply plugin: 'android-test'


repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        url "http://files.couchbase.com/maven2/"
    }
}


project.ext['src.test.dir'] = ['src/test']
project.ext['module.iml.file'] = "xebia-app.iml"

task addTest {
    def src = project.ext['src.test.dir']
    def file = file(project.ext['module.iml.file'])

    println "gradle-android-add-dir using src: $src"
    println "gradle-android-add-dir using file: $file"

    doLast {
        if (file.exists()) {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find { it.@url == path }
                if (set == null) {
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}/java", 'isTestSource': "true"])
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}/res", 'type': "java-test-resource"])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }

            def libParsedXml = (new XmlParser()).parse(file)
            def libNode = libParsedXml.component[1]
            src.each {
                def junitPath = 'junit-4.11'
                def robolectricPath = 'robolectric-2.3-SNAPSHOT-jar-with-dependencies'

                def set = libNode.find { it.@name == junitPath }
                if (set == null) {
                    new Node(libNode, 'orderEntry', ['type': 'library', 'name': junitPath, 'scope': 'TEST', 'level': 'project'])
                    new Node(libNode, 'orderEntry', ['type': 'library', 'name': robolectricPath, 'scope': 'TEST', 'level': 'project'])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(libParsedXml)
                    file.text = writer.toString()
                }
            }
        }
    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    preBuild.dependsOn(addTest)
}

androidTest {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'

    // configure max heap size of the test JVM
    maxHeapSize = "2048m"
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
        packageName "fr.xebia.app"
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/ASL2.0'
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

apt {
    arguments {
        androidManifestFile variant.processResources.manifestFile
        resourcePackageName android.defaultConfig.packageName
    }
}

//antlr4 {
//    tool {
//        "fr.xebia.app.antlr" {
//            visitor = true
//            listener = false
//        }
//    }
//}

dependencies {
    apt "org.androidannotations:androidannotations:3.0.1"
    compile 'org.androidannotations:androidannotations-api:3.0.1'
    compile 'com.squareup.okhttp:okhttp:2.0.0-SNAPSHOT'
    compile 'com.squareup.picasso:picasso:2.2.0'
    compile 'com.squareup.retrofit:retrofit:1.5.0'
    compile 'com.squareup.retrofit:converter-jackson:1.5.0'
    compile 'com.koushikdutta.ion:ion:1.2.4'
    compile 'com.path:android-priority-jobqueue:1.1.1'
    compile 'de.greenrobot:eventbus:2.2.0'
    compile 'com.github.chrisbanes.actionbarpulltorefresh:library:0.9.3'
    compile 'se.emilsjolander:sprinkles:1.2.4'
    compile 'com.android.support:support-v4:+'
    compile 'com.nhaarman.listviewanimations:library:2.6.0'
    compile 'org.jsoup:jsoup:1.7.3'
    compile 'uk.co.chrisjenx:calligraphy:0.7.+'
//    compile 'org.antlr:antlr4-runtime:4.2.2'
//    antlr4 'org.antlr:antlr4:4.2.2'

    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile 'com.jakewharton.espresso:espresso:1.1-r2'
    androidTestCompile 'com.jakewharton.espresso:espresso-support-v4:1.1-r2'
    androidTestCompile 'com.squareup.spoon:spoon-client:1.1.0'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.squareup:fest-android:1.0.+'
    androidTestCompile 'junit:junit:4.11'
    androidTestCompile 'org.assertj:assertj-core:1.6.0'
    androidTestCompile 'net.sf.twip:twip:3.3'
    //   Remove all maven dependencies
    androidTestCompile('org.robolectric:robolectric:2.3-SNAPSHOT') {
        exclude module: 'classworlds'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
    }

//
    testCompile 'org.assertj:assertj-core:1.6.0'
    testCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }

}
